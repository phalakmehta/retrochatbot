# requirements.txt
langchain==0.1.17
langgraph==0.0.55
langchain-google-genai==1.0.3
python-dotenv==1.0.0
gunicorn==21.2.0
Flask==2.3.3
flask-cors==4.0.0
requests==2.31.0

# Procfile (for Railway deployment)
web: gunicorn app:app_flask --bind 0.0.0.0:$PORT --workers 2 --timeout 120 --keep-alive 5 --max-requests 1000

# railway.json (Railway configuration)
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "heroku/buildpacks:20"
  },
  "deploy": {
    "startCommand": "gunicorn app:app_flask --bind 0.0.0.0:$PORT --workers 2 --timeout 120",
    "healthcheckPath": "/health",
    "healthcheckTimeout": 30
  }
}

# .env.example (Template for environment variables)
GOOGLE_API_KEY=your_google_gemini_api_key_here

# diagnosis.py - Quick diagnostic script
import os
import requests
import sys

def test_deployment():
    """Test the deployed W.O.P.R. system."""
    
    print("üîç W.O.P.R. Deployment Diagnostics")
    print("=" * 50)
    
    # Test URLs
    base_url = "https://retrochatbot-production.up.railway.app"
    health_url = f"{base_url}/health"
    chat_url = f"{base_url}/chat"
    
    # Test 1: Health endpoint
    print("\n1Ô∏è‚É£ Testing health endpoint...")
    try:
        response = requests.get(health_url, timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Health check: {health_data.get('message', 'OK')}")
            print(f"   AI Available: {health_data.get('ai_available', 'Unknown')}")
        else:
            print(f"‚ö†Ô∏è Health check returned HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
    
    # Test 2: Chat endpoint
    print("\n2Ô∏è‚É£ Testing chat endpoint...")
    try:
        test_payload = {"messages": [], "riddle_number": 0}
        response = requests.post(
            chat_url, 
            json=test_payload, 
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        if response.status_code == 200:
            data = response.json()
            if data.get('messages'):
                print("‚úÖ Chat endpoint working")
                print(f"   Response: {data['messages'][0]['content'][:50]}...")
            else:
                print("‚ö†Ô∏è Chat endpoint returned empty response")
        else:
            print(f"‚ùå Chat endpoint returned HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Chat endpoint failed: {e}")
    
    # Test 3: Environment variables (if running locally)
    print("\n3Ô∏è‚É£ Checking environment...")
    if os.path.exists('.env'):
        print("‚úÖ .env file found")
        from dotenv import load_dotenv
        load_dotenv()
        if os.getenv('GOOGLE_API_KEY'):
            print("‚úÖ GOOGLE_API_KEY found in environment")
        else:
            print("‚ùå GOOGLE_API_KEY not found")
    else:
        print("‚ÑπÔ∏è No .env file (normal for production deployment)")
    
    print("\n" + "=" * 50)
    print("üéØ Diagnostic complete!")

if __name__ == "__main__":
    test_deployment()

